"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const PropertySymbol = __importStar(require("../PropertySymbol.cjs"));
/**
 * Module URL utility.
 */
class ModuleURLUtility {
    /**
     * Returns module URL based on parent URL and the import map.
     *
     * @param window Window.
     * @param parentURL Parent URL.
     * @param url Module URL.
     */
    static getURL(window, parentURL, url) {
        const parentURLString = typeof parentURL === 'string' ? parentURL : parentURL.href;
        const importMap = window[PropertySymbol.moduleImportMap];
        if (!importMap) {
            return new url_1.URL(url, parentURLString);
        }
        if (importMap.scopes.length) {
            for (const scope of importMap.scopes) {
                if (parentURLString.includes(scope.scope)) {
                    for (const rule of scope.rules) {
                        if (url.startsWith(rule.from)) {
                            return new url_1.URL(rule.to + url.replace(rule.from, ''), parentURLString);
                        }
                    }
                }
            }
        }
        if (importMap.imports.length) {
            for (const rule of importMap.imports) {
                if (url.startsWith(rule.from)) {
                    return new url_1.URL(rule.to + url.replace(rule.from, ''), parentURLString);
                }
            }
        }
        return new url_1.URL(url, parentURLString);
    }
}
exports.default = ModuleURLUtility;
//# sourceMappingURL=ModuleURLUtility.cjs.map